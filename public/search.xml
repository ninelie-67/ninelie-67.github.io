<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven项目管理工具</title>
      <link href="/2021/06/18/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/06/18/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具软件</p></blockquote><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> java项目 </tag>
            
            <tag> 项目管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令和基本操作</title>
      <link href="/2021/06/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/06/17/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Git基本介绍"><a href="#Git基本介绍" class="headerlink" title="Git基本介绍"></a>Git基本介绍</h1><h2 id="1，Git介绍"><a href="#1，Git介绍" class="headerlink" title="1，Git介绍"></a>1，Git介绍</h2><p>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p><span id="more"></span><h2 id="2，Git的安装"><a href="#2，Git的安装" class="headerlink" title="2，Git的安装"></a>2，Git的安装</h2><p>Git官方下载地址：<a href="https://git-scm.com/downloads">Git</a></p><p>Windows系统安装完成后桌面右键会出现 <code>git bash</code> 选项<br>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>设置用户名和设置邮箱，–global为全局设置</p><p>git config  –list 查看git配置信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h2 id="3，Git工作区，暂存库和版本库"><a href="#3，Git工作区，暂存库和版本库" class="headerlink" title="3，Git工作区，暂存库和版本库"></a>3，Git工作区，暂存库和版本库</h2><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录，写代码的地方。</li><li><strong>暂存区：</strong>一般存放在”git目录”下的index文件中，保存了下次将要提交的文件列表信息。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，是Git的版本库。</li></ul><h2 id="4，工作流程"><a href="#4，工作流程" class="headerlink" title="4，工作流程"></a>4，工作流程</h2><p>一般工作流程为：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><h2 id="1，创建仓库命令"><a href="#1，创建仓库命令" class="headerlink" title="1，创建仓库命令"></a>1，创建仓库命令</h2><ul><li>初始化Git仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><ul><li>使用我们指定目录作为Git仓库。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init newrepo</span><br></pre></td></tr></table></figure><ul><li>克隆仓库，拷贝一份远程仓库的命令为：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><blockquote><p>[url] 为你要克隆的仓库的地址</p></blockquote><ul><li>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span>  [url]  newname</span><br></pre></td></tr></table></figure><h2 id="3，提交与修改"><a href="#3，提交与修改" class="headerlink" title="3，提交与修改"></a>3，提交与修改</h2><h4 id="（1）git-status-命令，查看仓库当前的状态，显示有变更的文件。"><a href="#（1）git-status-命令，查看仓库当前的状态，显示有变更的文件。" class="headerlink" title="（1）git status 命令，查看仓库当前的状态，显示有变更的文件。"></a>（1）git status 命令，查看仓库当前的状态，显示有变更的文件。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><blockquote><p>通常我们使用 <code>-s</code> 参数来获得简短的输出结果：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br></pre></td></tr></table></figure><h4 id="（2）git-add-命令，将文件内容添加到暂存库。"><a href="#（2）git-add-命令，将文件内容添加到暂存库。" class="headerlink" title="（2）git add 命令，将文件内容添加到暂存库。"></a>（2）git add 命令，将文件内容添加到暂存库。</h4><ul><li>添加一个或多个文件到暂存区：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add [file1] [file2] ...</span><br></pre></td></tr></table></figure><blockquote><p>[file1]… 为文件名称</p></blockquote><ul><li>添加指定目录到暂存区，包括子目录：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add [dir]</span><br></pre></td></tr></table></figure><blockquote><p>[dir]为指定的目录</p></blockquote><ul><li>添加当前目录下的所有文件到暂存区：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h4 id="（3）git-commit-命令，将暂存区内容添加到本地仓库中。"><a href="#（3）git-commit-命令，将暂存区内容添加到本地仓库中。" class="headerlink" title="（3）git commit 命令，将暂存区内容添加到本地仓库中。"></a>（3）git commit 命令，将暂存区内容添加到本地仓库中。</h4><ul><li>提交暂存区到本地仓库</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m [message]</span><br></pre></td></tr></table></figure><blockquote><p>[message] 可以是一些备注信息。</p></blockquote><ul><li><strong>-a</strong> 参数设置修改文件后不需要执行 git add 命令，直接来提交</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure><h4 id="（4）git-reset-命令，回退版本，可以指定退回某一次提交的版本。"><a href="#（4）git-reset-命令，回退版本，可以指定退回某一次提交的版本。" class="headerlink" title="（4）git reset 命令，回退版本，可以指定退回某一次提交的版本。"></a>（4）git reset 命令，回退版本，可以指定退回某一次提交的版本。</h4><ul><li>git reset 命令语法格式如下：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure><blockquote><p><strong>–mixed:</strong> 为默认，用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><p><strong>–soft</strong>: 回退版本库，就相当于只移动 HEAD 的指向，但并不会将快照回滚到暂存区域。相当于撤消了上一次的提交</p><p>**–hard:**回退版本库，暂存区，工作区。（因此我们修改过的代码就没了，需要谨慎使用）</p></blockquote><blockquote><p>**[ HEAD ]:****表示当前指向的版本</p><ul><li>HEAD~0 表示当前版本</li><li>HEAD~1 上一个版本</li><li>HEAD^2 上上一个版本</li><li>HEAD^3 上上上一个版本</li><li>类推……（也可以直接加上版本号）</li></ul></blockquote><ul><li>git reset HEAD 命令用于取消已缓存的内容。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD</span><br></pre></td></tr></table></figure><h4 id="（5）git-diff-命令，比较文件的不同，即比较文件在暂存区和工作区的差异。"><a href="#（5）git-diff-命令，比较文件的不同，即比较文件在暂存区和工作区的差异。" class="headerlink" title="（5）git diff 命令，比较文件的不同，即比较文件在暂存区和工作区的差异。"></a>（5）git diff 命令，比较文件的不同，即比较文件在暂存区和工作区的差异。</h4><ul><li>显示暂存区和工作区的差异:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff [file]</span><br></pre></td></tr></table></figure><ul><li>显示暂存区和上一次提交(commit)的差异:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --cached [file]</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">$ git diff --staged [file]</span><br></pre></td></tr></table></figure><ul><li>显示两次提交之间的差异:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure><h4 id="（6）git-rm-命令，用于删除文件。"><a href="#（6）git-rm-命令，用于删除文件。" class="headerlink" title="（6）git rm 命令，用于删除文件。"></a>（6）git rm 命令，用于删除文件。</h4><ul><li>将文件从暂存区和工作区中删除：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <strong>-f</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -f runoob.txt </span><br></pre></td></tr></table></figure><blockquote><p>如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 <strong>–cached</strong> 选项即可：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="（7）git-mv-命令，用于移动或重命名一个文件、目录或软连接。"><a href="#（7）git-mv-命令，用于移动或重命名一个文件、目录或软连接。" class="headerlink" title="（7）git mv 命令，用于移动或重命名一个文件、目录或软连接。"></a>（7）git mv 命令，用于移动或重命名一个文件、目录或软连接。</h4><ul><li>移动或重命名一个文件、目录或软连接。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv [file] [newfile]</span><br></pre></td></tr></table></figure><blockquote><p>如果新但文件名已经存在，但还是要重命名它，可以使用 <strong>-f</strong> 参数：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mv -f [file] [newfile]</span><br></pre></td></tr></table></figure><h2 id="4，提交日志"><a href="#4，提交日志" class="headerlink" title="4，提交日志"></a>4，提交日志</h2><h4 id="（1）git-log-命令，-查看提交历史。"><a href="#（1）git-log-命令，-查看提交历史。" class="headerlink" title="（1）git log 命令， 查看提交历史。"></a>（1）git log 命令， 查看提交历史。</h4><ul><li>查看历史提交记录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> </span><br></pre></td></tr></table></figure><blockquote><p>可以用 <strong>–oneline</strong> 选项来查看历史记录的简洁的版本。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline </span><br></pre></td></tr></table></figure><blockquote><p>可以用 <strong>–graph</strong> 选项，查看历史中什么时候出现了分支、合并。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph  --oneline </span><br></pre></td></tr></table></figure><blockquote><p>可以用 <strong>–reverse</strong> 参数来逆向显示所有日志。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --reverse  --oneline </span><br></pre></td></tr></table></figure><blockquote><p>只想查找指定用户的提交日志可以使用 <strong>–author</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=[name] --oneline</span><br></pre></td></tr></table></figure><blockquote><p>如果要指定日期，可以执行几个选项：**–since** 和 <strong>–before</strong>，也可以用 -<strong>-until</strong> 和 <strong>–after</strong>。</p></blockquote><h4 id="（2）-git-blame-命令，查看指定文件的修改记录"><a href="#（2）-git-blame-命令，查看指定文件的修改记录" class="headerlink" title="（2） git blame 命令，查看指定文件的修改记录"></a>（2） git blame 命令，查看指定文件的修改记录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="（3）git-rebase-命令，合并提交信息"><a href="#（3）git-rebase-命令，合并提交信息" class="headerlink" title="（3）git rebase 命令，合并提交信息"></a>（3）git rebase 命令，合并提交信息</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i [HEAD]</span><br></pre></td></tr></table></figure><blockquote><p>开发一个功能时，可能会在本地有无数次commit，可以在rebase时将本地多次的commit合并成一个commit，</p></blockquote><h2 id="5，创建和切换分支"><a href="#5，创建和切换分支" class="headerlink" title="5，创建和切换分支"></a>5，创建和切换分支</h2><h4 id="（1）创建分支"><a href="#（1）创建分支" class="headerlink" title="（1）创建分支"></a>（1）创建分支</h4><ul><li>创建分支命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [feature]</span><br></pre></td></tr></table></figure><blockquote><p>[feature]为要创建的分支</p></blockquote><h4 id="（2）切换分支"><a href="#（2）切换分支" class="headerlink" title="（2）切换分支"></a>（2）切换分支</h4><ul><li>切换分支命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [feature]</span><br></pre></td></tr></table></figure><h4 id="（3）删除分支"><a href="#（3）删除分支" class="headerlink" title="（3）删除分支"></a>（3）删除分支</h4><ul><li>删除分支命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [feature]</span><br></pre></td></tr></table></figure><blockquote><p>当一个功能开发完成，并且成功合并到主分支，我们应该删除分支</p></blockquote><p> <code>git log --decorate --all --graph --oneline 命令查看是否删除成功</code></p><h2 id="6，远程操作"><a href="#6，远程操作" class="headerlink" title="6，远程操作"></a>6，远程操作</h2><h4 id="（1）git-push-命令用于从将本地的分支版本上传到远程并合并。"><a href="#（1）git-push-命令用于从将本地的分支版本上传到远程并合并。" class="headerlink" title="（1）git push 命令用于从将本地的分支版本上传到远程并合并。"></a>（1）git push 命令用于从将本地的分支版本上传到远程并合并。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果本地分支名与远程分支名相同，则可以省略冒号：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><h4 id="（2）git-pull-命令用于从远程获取代码并合并本地的版本。"><a href="#（2）git-pull-命令用于从远程获取代码并合并本地的版本。" class="headerlink" title="（2）git pull 命令用于从远程获取代码并合并本地的版本。"></a>（2）<strong>git pull</strong> 命令用于从远程获取代码并合并本地的版本。</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>每次提交之前拉取代码可以减少冲突</p></blockquote><h4 id="（3）git-merge-从远端仓库提取数据并尝试合并到当前分支。"><a href="#（3）git-merge-从远端仓库提取数据并尝试合并到当前分支。" class="headerlink" title="（3）git merge 从远端仓库提取数据并尝试合并到当前分支。"></a>（3）git merge 从远端仓库提取数据并尝试合并到当前分支。</h4><ul><li>从远端仓库提取数据并尝试合并到当前分支：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge</span><br></pre></td></tr></table></figure><ul><li><p>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。</p><p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行:</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [<span class="built_in">alias</span>]</span><br></pre></td></tr></table></figure><ul><li>以上命令告诉 Git 去获取它有你没有的数据，然后你可以执行：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge [<span class="built_in">alias</span>]/[branch]</span><br></pre></td></tr></table></figure><h4 id="（4）git-remote-命用于在远程仓库的操作。"><a href="#（4）git-remote-命用于在远程仓库的操作。" class="headerlink" title="（4）git remote 命用于在远程仓库的操作。"></a>（4）<strong>git remote</strong> 命用于在远程仓库的操作。</h4><ul><li>显示所有远程仓库：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><ul><li>显示某个远程仓库的信息：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show [remote]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2021/06/15/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/06/15/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前言：</strong>用hexo主题next博客搭建过程中遇到了很多坑，经过差不多两三天的持续摸索优化，</p><p>个人博客算是初步完成了，在此分享搭建过程，算是避坑吧！！多说都是泪！！(p≧w≦q)</p><p>那就开始搭建吧！</p></blockquote><span id="more"></span><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="1，安装Node-js，Git"><a href="#1，安装Node-js，Git" class="headerlink" title="1，安装Node.js，Git"></a>1，安装Node.js，Git</h2><blockquote><p>网上很多教程这里我就不详细展开了</p></blockquote><ul><li><a href="https://nodejs.org/en/">node.js官方下载地址</a></li><li><a href="https://git-scm.com/downloads">Git官方下载地址</a></li></ul><h2 id="2，安装hexo"><a href="#2，安装hexo" class="headerlink" title="2，安装hexo"></a>2，安装hexo</h2><p>我是用hexo来搭建个人博客所以盘它</p><ul><li><p>1，创建一个文件夹（存放blog的东西，最好直接在桌面新建方便），<code>cd</code>到该文件夹下,也可以直接在目录下输入<code>cmd</code>然后回车</p><p><img src="cmd.png" alt="cmd"></p></li><li><p>2，设置npm淘宝镜像</p><blockquote><p>npm默认的源的下载速度可能很慢，建议使用淘宝镜像替换。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>3，安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><p>验证hexo安装是否成功</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="hexo-yanzheng.png" alt="hexo-yanzheng"></p></li></ul><h2 id="3，建站"><a href="#3，建站" class="headerlink" title="3，建站"></a>3，建站</h2><p>==注意==：都在你博客根目录下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h2 id="4，hexo常用命令"><a href="#4，hexo常用命令" class="headerlink" title="4，hexo常用命令"></a>4，hexo常用命令</h2><p><strong>创建新博文（博文位置为blog\source_posts下）:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;New Post &quot;</span><br></pre></td></tr></table></figure><p><strong>根据当前目录下文件,生成静态网页（只有生成才能更新页面）:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p><strong>清理生成文件（每次更新都要清理后重新生成）:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p><strong>运行本地服务（可以在本地预览博客）</strong>:</p><ul><li>打开浏览器，地址栏中输入：<a href="http://localhost:4000/,%E5%BA%94%E8%AF%A5%E5%8F%AF%E4%BB%A5%E7%9C%8B%E8%A7%81%E5%88%9A%E5%88%9A%E5%88%9B%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%E3%80%82">http://localhost:4000/,应该可以看见刚刚创建的博客了。</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><strong>上传至远端（部署到服务器上，后文会详细介绍）</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h1 id="部署个人博客"><a href="#部署个人博客" class="headerlink" title="部署个人博客"></a>部署个人博客</h1><blockquote><p>可以将个人博客部署到GitHub上，因为免费哈哈，也可以部署到码云或code上</p><p>这里以Github为例子</p></blockquote><h2 id="1，建立个人仓库"><a href="#1，建立个人仓库" class="headerlink" title="1，建立个人仓库"></a>1，建立个人仓库</h2><p><img src="newrepo.png" alt="newrepo"></p><p><img src="repopublic.png" alt="repopublic"></p><blockquote><p>==注意：==用户部署个人博客的GitHub仓库的名称必须符合特定要求才行</p><p>​                            规则：==用户+github.io==</p></blockquote><p>然后点击创建即可。</p><h2 id="2，安装部署插件"><a href="#2，安装部署插件" class="headerlink" title="2，安装部署插件"></a>2，安装部署插件</h2><p>在博客目录下输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="3，更改配置文件"><a href="#3，更改配置文件" class="headerlink" title="3，更改配置文件"></a>3，更改配置文件</h2><p>在博客==根目录==下找到 _config.yml</p><p>修改以下内容:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: </span></span><br><span class="line"><span class="comment"># 类型  </span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span>    </span><br><span class="line"><span class="comment">#repo: 填写自己仓库的地址  </span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/ninelie-67/ninelie67.github.io.git</span>  </span><br><span class="line"><span class="comment"># 分支  branch: master</span></span><br></pre></td></tr></table></figure><blockquote><p>==注意：==type: ，repo:，branch:  后都有一个空格</p></blockquote><h2 id="4，部署"><a href="#4，部署" class="headerlink" title="4，部署"></a>4，部署</h2><p>使用hexo命令<kbd>hexo deploy</kbd> ”</p><p>输入GitHub账号，密码，部署完成</p><blockquote><p>在网页上访问http://+“你的GitHub用户名”+github.io即可访问自己个人博客</p></blockquote><h1 id="更改主题样式"><a href="#更改主题样式" class="headerlink" title="更改主题样式"></a>更改主题样式</h1><blockquote><p>hexo可更改多种主题，</p><p>可以去<a href="https://hexo.io/themes/">主题地址</a>查看</p><p>这里以Next主题为例</p></blockquote><h2 id="1-下载主题"><a href="#1-下载主题" class="headerlink" title="1,下载主题"></a>1,下载主题</h2><p>在博客根目录下输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure><h2 id="2，启动主题"><a href="#2，启动主题" class="headerlink" title="2，启动主题"></a>2，启动主题</h2><p>打开 <strong>站点配置文件</strong>（根目录下的_config.yml）， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code></p><p><img src="them.png" alt="them"></p><h2 id="3，重新生成验证"><a href="#3，重新生成验证" class="headerlink" title="3，重新生成验证"></a>3，重新生成验证</h2><p>执行<code>hexo clean </code>和<code>hexo generate</code><br>启动本地服务<code>hexo server</code><br>在本地查看效果</p><h2 id="4，部署更改的主题"><a href="#4，部署更改的主题" class="headerlink" title="4，部署更改的主题"></a>4，部署更改的主题</h2><p>执行命令<code>hexo deploy</code></p><blockquote><p>==注意：==要删除主题文件中的 ==<strong>.git</strong>==和**==.github==**不然更改的样式可能无法显示</p></blockquote><h1 id="Next主题样式"><a href="#Next主题样式" class="headerlink" title="Next主题样式"></a>Next主题样式</h1><blockquote><p>在这个环节遇到的问题最多，踩了好多好多的坑，哎( $ _ $） ！</p></blockquote><h2 id="1，Next提供4种风格（可以自己一一尝试）"><a href="#1，Next提供4种风格（可以自己一一尝试）" class="headerlink" title="1，Next提供4种风格（可以自己一一尝试）"></a>1，Next提供4种风格（可以自己一一尝试）</h2><ul><li>Muse-默认，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme</li><li>Gemini-与Posces类似</li></ul><p>在主题配置文件中（\blog\themes\next\ _congfig.yml）修改</p><p><img src="schem.png" alt="schem"></p><p>将想要的风格前的<code>#</code>去掉</p><blockquote><p>==注意==：只能同时使用一种风格</p></blockquote><h2 id="2，更多美化"><a href="#2，更多美化" class="headerlink" title="2，更多美化"></a>2，更多美化</h2><p>可以在<a href="http://theme-next.iissnan.com/">官方文档</a>中一一查找。</p><p>还有百度查找自己喜欢的美化。</p><blockquote><p>有时间更新一些常见美化步骤</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
